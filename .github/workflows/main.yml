name: github pages

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: pages-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Ensure gh-pages branch exists
        run: |
          if ! git ls-remote --exit-code --heads origin gh-pages; then
            echo "Creating gh-pages branch..."
            git checkout --orphan gh-pages
            git reset --hard
            echo "<h1>Init gh-pages</h1>" > index.html
            git add index.html
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit -m "Initialize gh-pages branch"
            git push origin gh-pages
            git checkout "${GITHUB_REF_NAME}"
          fi

      - name: Setup Node.js + cache
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "yarn"
          cache-dependency-path: yarn.lock

      - name: Install system deps
        run: sudo apt-get update && sudo apt-get install -y build-essential python3

      - name: Print Node and Yarn versions
        run: |
          node -v
          yarn -v

      - name: Install dependencies
        run: yarn install

      - name: Build project
        run: yarn build
        env:
          VITE_CONFIG_ENV: ${{ vars.VITE_CONFIG_ENV }}

      - name: Write CNAME if provided
        run: |
          if [ -n "${PAGES_CNAME}" ]; then
            echo "$PAGES_CNAME" > dist/CNAME
            echo "CNAME set to: $PAGES_CNAME"
          else
            echo "No PAGES_CNAME set; skipping CNAME"
          fi
        env:
          PAGES_CNAME: ${{ vars.PAGES_CNAME }}

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          clean: true

      - name: Set commit output
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT